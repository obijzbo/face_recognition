#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon May 10 16:27:56 2021

@author: tns
"""

from fastai.vision import *
import numpy as np
import matplotlib.pyplot as plt
import cv2


PATH = '/media/tns/Practice/Machine Learning/face_recognition/archive/data/train/ben_afflek/'

ROOT_PATH = '/media/tns/Practice/Machine Learning/face_recognition/archive/data'

TRAIN_PATH = '/media/tns/Practice/Machine Learning/face_recognition/archive/data/train/'

VAL_PATH = '/media/tns/Practice/Machine Learning/face_recognition/archive/data/val/'

image_path = '/media/tns/Practice/Machine Learning/face_recognition/archive/data/train/ben_afflek/httpcsvkmeuaeccjpg.jpg'

image = cv2.imread(str(image_path))
print(image.shape)

h, w = image.shape[:2]
plt.figure(figsize=(w/30, h/30))
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))

arch = '/media/tns/Practice/Machine Learning/face_recognition/caffe_face_detector_pre_trained_model/architecture.txt'
weights = '/media/tns/Practice/Machine Learning/face_recognition/caffe_face_detector_pre_trained_model/weights.caffemodel'

neural_net = cv2.dnn.readNetFromCaffe(arch, weights)

blob = cv2.dnn.blobFromImage(
    image=cv2.resize(image, (299, 299)), # Resize the image to 299px by 299px.
    scalefactor=1.0, # Set the scaling factor.
    size=(299, 299), # Specify the spatial size of the image.
    mean=(103.93, 116.77, 123.68) # Normalize by subtracting the per-channel means of ImageNet images (which were used to train the pre-trained model).
)

neural_net.setInput(blob)
detections = neural_net.forward()

threshold = 0.5

for i in range(0, detections.shape[2]):
    confidence = detections[0, 0, i, 2]
    if confidence > threshold:
        box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
        startX, startY, endX, endY = box.astype('int')
        text = '{:.2f}%'.format(confidence * 100)
        textY = startY - 10 if startY - 10 > 10 else startY + 10 # Ensure that the text won't go off-image.
        cv2.rectangle(
            img=image, 
            pt1=(startX, startY), # Vertex of the rectangle.
            pt2=(endX, endY), # Vertex of the rectangle opposite to `pt1`.
            color=(255, 0, 0),
            thickness=2
        )
        cv2.putText(
            img=image, 
            text=text, 
            org=(startX, textY), # Bottom-left corner of the text string.
            fontFace=cv2.FONT_HERSHEY_SIMPLEX, 
            fontScale=0.5, 
            color=(255, 0, 0),
            thickness=2
        )
        

plt.figure(figsize=(w/30, h/30))
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))